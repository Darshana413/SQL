import pandas as pd
import numpy as np
from scipy.optimize import linprog
from tkinter import filedialog, Text
from scipy.optimize import linprog

#input dataframe from excel 

allocation = filedialog.askopenfilename(initialdir="/", title="Select the Work Allocation",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

row_21_mv = filedialog.askopenfilename(initialdir="/", title="Select the Tableau 2021 Movie T0 Report",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

row_22_mv = filedialog.askopenfilename(initialdir="/", title="Select the Tableau 2022 Movie T0 Report",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

row_21_tv = filedialog.askopenfilename(initialdir="/", title="Select the Tableau 2021 Series T0 Report",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

row_22_tv = filedialog.askopenfilename(initialdir="/", title="Select the Tableau 2022 Series T0 Report",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

t0_report = filedialog.askopenfilename(initialdir="/", title="Select the combined misses T0 report",
filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))

all = pd.read_excel(allocation)
df1 = pd.read_excel(row_21_mv)
df2 = pd.read_excel(row_22_mv)
df3 = pd.read_excel(row_21_tv)
df4 = pd.read_excel(row_22_tv)
gap = pd.read_excel(t0_report)

# insert column
all.insert(2, "Misses %", ' ')
all.insert(3, "Counts to achieve 0bp", ' ')
all.insert(4, "Counts to achieve 500bp", ' ')
all.insert(5, "Maintenance Count", ' ')
all.insert(6, "Daily Allocation Counts", 0.0)
all.insert(7, "Optimized Counts", 0)
all.insert(8, "AHT", 0.0)
all.insert(9, "Optimized Productive Time", 0.0)


#rename column names for df1,df3
dict = {'Unnamed: 1': 'Datatype',
         '1' : 'AE en-US',
        'Unnamed: 3': 'ID en-US',
        'Unnamed: 4': 'KR en-US',
        'Unnamed: 5': 'NL en-US',
        'Unnamed: 6': 'PH en-US',
        '2' : 'PL en-US',
        'Unnamed: 8': 'SE en-US',
        'Unnamed: 9': 'SG en-US',
        'Unnamed: 10': 'TR en-US'}
 
# call rename () method
df1.rename(columns=dict,
          inplace=True)

df3.rename(columns=dict,
           inplace=True)

#rename column names for df2,df4
dict1 = {'Unnamed: 1': 'Datatype',
         '1' : 'EC es-MX',
        'Unnamed: 3': 'EG en-US',
        'Unnamed: 4': 'HK en-US',
        'Unnamed: 5': 'IL en-US',
        'Unnamed: 6': 'TH en-US',
        '2' : 'TW en-US',
        'Unnamed: 8': 'ZA en-US'}
 
# call rename () method
df2.rename(columns=dict1,
          inplace=True)

df4.rename(columns=dict1,
          inplace=True)



#remove first column from DataFrame
df1 = df1[df1.columns[1:]]
df2 = df2[df2.columns[1:]]
df3 = df3[df3.columns[1:]]
df4 = df4[df4.columns[1:]]

#merge movie and series dataframes separately
df_mv = df1.merge(df2, on='Datatype')
df_tv = df3.merge(df4, on='Datatype')

#remove unwanted columns from T0 Gap report

gap = gap.drop(['run_date', 'period pvs','t30 pvs','total pvs', 'local release date', 'release date no ex','certificate no ex','gross no ex','open weekend no ex','running time','imdb display title','title overview','rank','locale_pvwc','title_page','odm_link'], axis=1)

#rename gap columns
dict1 = {
        'country locale' : 'countrylocale',
        'title type': 'titletype'}

# call rename () method
gap.rename(columns=dict1,
          inplace=True)

#Series = ["tvSeries","tvMiniSeries"]
row22 = ['EC es-MX', 'EG en-US', 'HK en-US', 'IL en-US', 'TH en-US', 'TW en-US', 'ZA en-US']

for index, row in all.iterrows():
        if "MV" in all.loc[index, 'Task']:
            moviegap = gap[gap['titletype'] == "movie"]
            locale = all.loc[index, 'Locale']

            for df in df_mv.columns:

                  if locale in df:
                        localegap = moviegap[(moviegap['countrylocale'] == locale)]

                        if "RD" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[6, df]
                              rdgap = localegap['release date'].dropna()               
                              all.loc[index, 'AHT'] = 1.8

                              if(df_mv.loc[6, df] < 0):
                                   countsum = rdgap.cumsum()
                                   needcount = (0 - df_mv.loc[6, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = ((countsum*100) <= needcount).sum()
                                          
                              elif(0<df_mv.loc[6, df]<500):
                                   countsum = rdgap.cumsum()
                                   needcount = (500 - df_mv.loc[6, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15
                                              
                        elif "Cert" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[8, df]
                              certgap = localegap['certificate'].dropna()
                              all.loc[index, 'AHT'] =  1.0

                              if(df_mv.loc[8, df] < 0):
                                   countsum = certgap.cumsum()
                                   needcount = (0 - df_mv.loc[8, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[8, df]<500):
                                   countsum = certgap.cumsum()
                                   needcount = (500 - df_mv.loc[8, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Trailer" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[1, df]
                              trailergap = localegap['trailer'].dropna()
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[1, df] < 0):
                                   countsum = trailergap.cumsum()
                                   needcount = (0 - df_mv.loc[1, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[1, df]<500):
                                   countsum = trailergap.cumsum()
                                   needcount = (500 - df_mv.loc[1, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Poster" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[2, df]
                              postergap = localegap['poster'].dropna()
                              all.loc[index, 'AHT'] = 1.3

                              if(df_mv.loc[2, df] < 0):
                                   countsum = postergap.cumsum()
                                   needcount = (0 - df_mv.loc[2, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[2, df]<500):
                                   countsum = postergap.cumsum()
                                   needcount = (500 - df_mv.loc[2, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Plot" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[4, df]
                              plotgap = localegap['plot'].dropna()
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[4, df] < 0):
                                   countsum = plotgap.cumsum()
                                   needcount = (0 - df_mv.loc[4, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[4, df]<500):
                                   countsum = plotgap.cumsum()
                                   needcount = (500 - df_mv.loc[4, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "AKA" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[5, df]
                              akagap = localegap['title aka'].dropna()
                              all.loc[index, 'AHT'] = 1.5

                              if(df_mv.loc[5, df] < 0):
                                   countsum = akagap.cumsum()
                                   needcount = (0 - df_mv.loc[5, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[5, df]<500):
                                   countsum = akagap.cumsum()
                                   needcount = (500 - df_mv.loc[5, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Genre" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[10, df]
                              genregap = localegap['genre'].dropna()

                              if(df_mv.loc[10, df] < 0):
                                   countsum = genregap.cumsum()
                                   needcount = (0 - df_mv.loc[10, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[10, df]<500):
                                   countsum = genregap.cumsum()
                                   needcount = (500 - df_mv.loc[10, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Keyword" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[11, df]
                              keygap = localegap['keyword'].dropna()
                              all.loc[index, 'AHT'] = 4.0

                              if(df_mv.loc[11, df] < 0):
                                   countsum = keygap.cumsum()
                                   needcount = (0 - df_mv.loc[11, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[11, df]<500):
                                   countsum = keygap.cumsum()
                                   needcount = (500 - df_mv.loc[11, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Gross" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[12, df]
                              grossgap = localegap['gross'].dropna()
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[12, df] < 0):
                                   countsum = grossgap.cumsum()
                                   needcount = (0 - df_mv.loc[12, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[12, df]<500):
                                   countsum = grossgap.cumsum()
                                   needcount = (500 - df_mv.loc[12, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Opening" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[14, df]
                              owgap = localegap['open weekend'].dropna()
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[14, df] < 0):
                                   countsum = owgap.cumsum()
                                   needcount = (0 - df_mv.loc[14, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[14, df]<500):
                                   countsum = owgap.cumsum()
                                   needcount = (500 - df_mv.loc[14, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Crew" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[16, df]
                              crewgap = localegap.dropna(subset=['cast', 'director', 'writer', 'producer','editor','cinematographer'], how='all')
                              crewgap = crewgap[['cast', 'director', 'writer', 'producer','editor','cinematographer']]
                              all.loc[index, 'AHT'] = 2.0
                              
                              if(df_mv.loc[16, df] < 0):
                                   colsum = crewgap.cumsum(axis = 1)
                                   countsum = colsum['cinematographer'].cumsum()
                                   needcount = (0 - df_mv.loc[16, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[16, df]<500):
                                   colsum = crewgap.cumsum(axis = 1)
                                   countsum = colsum['cinematographer'].cumsum()
                                   needcount = (500 - df_mv.loc[16, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15                             


                         
        elif "TV" in all.loc[index, 'Task']:

            locale = all.loc[index, 'Locale']

            if locale in row22:
                  seriesgap = gap[gap['titletype'].str.contains('tvSeries')]
            else:
                  seriesgap = gap[gap['titletype'].str.contains('tvSeries|tvMiniSeries')]

            for df in df_tv.columns:

                  if locale in df:
                        localegap = seriesgap[(seriesgap['countrylocale'] == locale)]
                        
                        if "RD" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[6, df]
                              rdgap = localegap['release date'].dropna()
                              rdgap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 1.8

                              if(df_mv.loc[6, df] < 0):
                                   countsum = rdgap.cumsum()
                                   needcount = (0 - df_mv.loc[6, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[6, df]<500):
                                   countsum = rdgap.cumsum()
                                   needcount = (500 - df_mv.loc[6, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()
                              
                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Cert" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[8, df]
                              certgap = localegap['certificate'].dropna()
                              certgap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 1.0

                              if(df_mv.loc[8, df] < 0):
                                   countsum = certgap.cumsum()
                                   needcount = (0 - df_mv.loc[8, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[8, df]<500):
                                   countsum = certgap.cumsum()
                                   needcount = (500 - df_mv.loc[8, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Trailer" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[1, df]
                              trailergap = localegap['trailer'].dropna()
                              trailergap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[1, df] < 0):
                                   countsum = trailergap.cumsum()
                                   needcount = (0 - df_mv.loc[1, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[1, df]<500):
                                   countsum = trailergap.cumsum()
                                   needcount = (500 - df_mv.loc[1, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Poster" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[2, df]
                              postergap = localegap['poster'].dropna()
                              postergap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 1.3

                              if(df_mv.loc[2, df] < 0):
                                   countsum = postergap.cumsum()
                                   needcount = (0 - df_mv.loc[2, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[2, df]<500):
                                   countsum = postergap.cumsum()
                                   needcount = (500 - df_mv.loc[2, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Plot" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[4, df]
                              plotgap = localegap['plot'].dropna()
                              plotgap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 2.0

                              if(df_mv.loc[4, df] < 0):
                                   countsum = plotgap.cumsum()
                                   needcount = (0 - df_mv.loc[4, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[4, df]<500):
                                   countsum = plotgap.cumsum()
                                   needcount = (500 - df_mv.loc[4, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "AKA" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[5, df]
                              akagap = localegap['title aka'].dropna()
                              akagap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 1.5
                              if(df_mv.loc[5, df] < 0):
                                   countsum = akagap.cumsum()
                                   needcount = (0 - df_mv.loc[5, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[5, df]<500):
                                   countsum = akagap.cumsum()
                                   needcount = (500 - df_mv.loc[5, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Genre" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[10, df]
                              genregap = localegap['genre'].dropna()
                              genregap.sort_values(ascending=False, inplace = True)

                              if(df_mv.loc[10, df] < 0):
                                   countsum = genregap.cumsum()
                                   needcount = (0 - df_mv.loc[10, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[10, df]<500):
                                   countsum = genregap.cumsum()
                                   needcount = (500 - df_mv.loc[10, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

                        elif "Keyword" in all.loc[index, 'Task']:
                              all.loc[index, 'Misses %'] = df_mv.loc[11, df]
                              keygap = localegap['keyword'].dropna()
                              keygap.sort_values(ascending=False, inplace = True)
                              all.loc[index, 'AHT'] = 4.0

                              if(df_mv.loc[11, df] < 0):
                                   countsum = keygap.cumsum()
                                   needcount = (0 - df_mv.loc[11, df])/100
                                   all.loc[index, 'Counts to achieve 0bp'] = (countsum*100 <= needcount).sum()
                                          
                              elif(0<df_mv.loc[11, df]<500):
                                   countsum = keygap.cumsum()
                                   needcount = (500 - df_mv.loc[11, df])/100
                                   all.loc[index, 'Counts to achieve 500bp'] = (countsum*100 <= needcount).sum()

                              else:
                                   all.loc[index,'Maintenance Count'] = 15

#allocate default daily counts from range
for index, row in all.iterrows():
     if all.loc[index,'Counts to achieve 0bp'] != " ":
          if all.loc[index,'Counts to achieve 0bp'] > 300:
               all.loc[index,'Daily Allocation Counts'] = 80.0
          elif all.loc[index,'Counts to achieve 0bp'] > 200:
               all.loc[index,'Daily Allocation Counts'] = 60.0   
          else:
               all.loc[index,'Daily Allocation Counts'] = 40.0

     elif all.loc[index,'Counts to achieve 500bp'] != " ":
          if all.loc[index,'Counts to achieve 500bp'] > 300:
              all.loc[index,'Daily Allocation Counts'] = 40.0
          else:
               all.loc[index,'Daily Allocation Counts'] = 30.0

     
     elif all.loc[index,'Counts to achieve 0bp'] == " " and all.loc[index,'Counts to achieve 500bp'] == " ":
          all.loc[index,'Daily Allocation Counts'] = all.loc[index,'Maintenance Count']

#Optimization

Aub = []

target = [a for a in all['AHT']]

for i in range(len(all['Daily Allocation Counts']) - 1 ):
     arr = np.zeros(len(all['Daily Allocation Counts']))
     arr[i] = -1
     arr[i+1] = 1

     Aub.append(list(arr))

targetminus = [-a for a in all['AHT']]
Aub.append(target)
Aub.append(targetminus)

bub = [-1.0 for i in range(len(all['Daily Allocation Counts'])-1)]
bub.append((float(input('Enter a max sum of prod time:'))))
bub.append(-(float(input('Enter a min sum of prod time:'))))

variables = all['Daily Allocation Counts'].values
bounds = {
    80: (60, 120),
    60: (40, 80),
    40: (20, 60),
    50: (10, 50),
    30: (10, 40),
    15: (3, 40)
}
bounds_list = []

for var in variables:
    if var in bounds:
        bounds_list.append(bounds[var])

integral = [1 for i in range(len(all['Daily Allocation Counts']))]
    
prob = linprog(c = target, A_ub = Aub, b_ub=bub, A_eq= None, b_eq=None, bounds=bounds_list, method='highs',integrality=integral)

for i,rows  in all.iterrows():
     all.loc[i, 'Optimized Counts'] = prob.x[i]


def round_up_to_multiple_of_5(x):
     return (np.ceil(x/5)) * 5

#all['Optimized Counts'].apply(round_up_to_multiple_of_5)
#round_up_to_multiple_of_5(all['Optimized Counts'])

#calc Productive time
for index, row in all.iterrows():
         
     all.loc[index,'Optimized Productive Time'] = (all.loc[index,'Optimized Counts']) *  (all.loc[index,'AHT'])
     round_up_to_multiple_of_5(all.loc[index,'Optimized Counts'])

print(prob.fun)    
print(all)


                   

                  
                        
                  


